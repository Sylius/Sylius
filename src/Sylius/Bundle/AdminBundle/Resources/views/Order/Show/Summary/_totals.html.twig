{% set orderPromotionAdjustment = constant('Sylius\\Component\\Core\\Model\\AdjustmentInterface::ORDER_PROMOTION_ADJUSTMENT') %}
{% set itemPromotionAdjustment = constant('Sylius\\Component\\Core\\Model\\AdjustmentInterface::ORDER_ITEM_PROMOTION_ADJUSTMENT') %}
{% set shippingAdjustment = constant('Sylius\\Component\\Core\\Model\\AdjustmentInterface::SHIPPING_ADJUSTMENT') %}
{% set taxAdjustment = constant('Sylius\\Component\\Core\\Model\\AdjustmentInterface::TAX_ADJUSTMENT') %}

<tr>
    <th colspan="8" id="items-total" class="right aligned">
        <strong>{{ 'sylius.ui.subtotal'|trans }}</strong>:
        {{ order.itemsTotal|sylius_price(order.currencyCode, order.exchangeRate) }}
    </th>
</tr>
<tr>
    <td colspan="4" id="shipping-charges">
        <strong>{{ 'sylius.ui.shipping_charges'|trans }}</strong>:
        {% if not order.adjustments(shippingAdjustment).isEmpty() %}
            <ul class="ui relaxed list">
                {% for adjustment in order.adjustments(shippingAdjustment) %}
                    <li class="item">
                        {{ adjustment.label }} {{ adjustment.amount|sylius_price(order.currencyCode, order.exchangeRate) }}
                    </li>
                {% endfor %}
            </ul>
        {% else %}
            <p><small>{{ 'sylius.ui.no_shipping_charges'|trans }}</small></p>
        {% endif %}
    </td>
    <td colspan="4" id="shipping-total" class="right aligned">
        <strong>{{ 'sylius.ui.shipping_total'|trans }}</strong>:
        {{ order.shippingTotal|sylius_price(order.currencyCode, order.exchangeRate) }}
    </td>
</tr>
<tr>
    <td colspan="4" id="taxes">
        <strong>{{ 'sylius.ui.taxes'|trans }}</strong>:
        {% set taxAdjustments = order.getAdjustmentsRecursively(taxAdjustment) %}
        {% if taxAdjustments is not empty %}
            <ul class="ui relaxed list">
                {% for taxLabel, taxAmount in sylius_aggregate_adjustments(taxAdjustments) %}
                    <li class="item">
                        {{ taxLabel }} {{ taxAmount|sylius_price(order.currencyCode, order.exchangeRate) }}
                    </li>
                {% endfor %}
            </ul>
        {% else %}
            <p><small>{{ 'sylius.ui.no_taxes'|trans }}</small></p>
        {% endif %}
    </td>
    <td colspan="4" id="tax-total" class="right aligned">
        <strong>{{ 'sylius.ui.tax_total'|trans }}</strong>:
        {{ order.taxTotal|sylius_price(order.currencyCode, order.exchangeRate) }}
    </td>
</tr>
<tr>
    <td colspan="4" id="promotion-discounts">
        <strong>{{ 'sylius.ui.discount'|trans }}</strong>:
        {% set orderPromotions = sylius_aggregate_adjustments(order.getAdjustmentsRecursively(orderPromotionAdjustment)) %}
        {% if not orderPromotions is empty %}
            <ul class="ui relaxed list">
                {% for label, amount in orderPromotions %}
                    <li class="item">
                        {{ label }} {% if not amount == 0 %}-{% endif %}{{ (-1 * amount)|sylius_price(order.currencyCode, order.exchangeRate) }}
                    </li>
                {% endfor %}
            </ul>
        {% else %}
            <p><small>{{ 'sylius.ui.no_promotion'|trans }}</small></p>
        {% endif %}
    </td>
    <td colspan="4" id="promotion-total" class="right aligned">
        <strong>{{ 'sylius.ui.promotion_total'|trans }}</strong>:
        {% set orderDiscount = order.adjustmentsTotalRecursively(orderPromotionAdjustment) %}
        {% if not orderDiscount == 0 %}-{% endif %}{{ (-1 * orderDiscount)|sylius_price(order.currencyCode, order.exchangeRate) }}
    </td>
</tr>
<tr>
    <td colspan="8" id="total" class="ui large header right aligned">
        <strong>{{ 'sylius.ui.total'|trans }}</strong>:
        {{ order.total|sylius_price(order.currencyCode, order.exchangeRate) }}
    </td>
</tr>
