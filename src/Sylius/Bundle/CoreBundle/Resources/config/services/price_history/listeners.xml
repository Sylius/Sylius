<?xml version="1.0" encoding="UTF-8"?>

<!--

 This file is part of the Sylius package.

 (c) Paweł Jędrzejewski

 For the full copyright and license information, please view the LICENSE
 file that was distributed with this source code.

-->

<container
        xmlns="http://symfony.com/schema/dic/services"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd"
>
    <services>
        <defaults public="true" />

        <service id="Sylius\Bundle\CoreBundle\PriceHistory\EntityObserver\CreateLogEntryOnPriceChangeObserver">
            <argument type="service" id="Sylius\Bundle\CoreBundle\PriceHistory\Logger\PriceChangeLoggerInterface" />
            <tag name="sylius.entity_observer" />
        </service>

        <service id="Sylius\Bundle\CoreBundle\PriceHistory\EntityObserver\ProcessLowestPricesOnChannelChangeObserver">
            <argument type="service" id="Sylius\Bundle\CoreBundle\PriceHistory\Processor\ProductLowestPriceBeforeDiscountProcessorInterface" />
            <argument type="service" id="sylius.repository.channel_pricing" />
            <argument>%sylius_core.price_history.batch_size%</argument>
            <tag name="sylius.entity_observer" />
        </service>

        <service id="Sylius\Bundle\CoreBundle\PriceHistory\EntityObserver\ProcessLowestPricesOnChannelPriceHistoryConfigChangeObserver">
            <argument type="service" id="Sylius\Bundle\CoreBundle\PriceHistory\Processor\ProductLowestPriceBeforeDiscountProcessorInterface" />
            <argument type="service" id="sylius.repository.channel_pricing" />
            <argument type="service" id="sylius.repository.channel" />
            <argument>%sylius_core.price_history.batch_size%</argument>
            <tag name="sylius.entity_observer" />
        </service>

        <service id="sylius.listener.channel_pricing_change" class="Sylius\Bundle\CoreBundle\PriceHistory\EventListener\OnFlushEntityObserverListener">
            <argument type="tagged_iterator" tag="sylius.entity_observer" />
            <tag name="doctrine.event_listener" event="onFlush" lazy="true" />
        </service>
    </services>
</container>
