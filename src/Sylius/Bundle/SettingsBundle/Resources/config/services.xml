<?xml version="1.0" encoding="UTF-8"?>

<!--

 This file is part of the Sylius package.

 (c) Paweł Jędrzejewski

 For the full copyright and license information, please view the LICENSE
 file that was distributed with this source code.

-->

<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services
                               http://symfony.com/schema/dic/services/services-1.0.xsd">

    <parameters>
        <parameter key="sylius.controller.settings.class">Sylius\Bundle\SettingsBundle\Controller\SettingsController</parameter>
        <parameter key="sylius.settings.form_factory.class">Sylius\Bundle\SettingsBundle\Form\Factory\SettingsFormFactory</parameter>
        <parameter key="sylius.settings.manager.class">Sylius\Bundle\SettingsBundle\Manager\SettingsManager</parameter>
        <parameter key="sylius.registry.settings_schema.class">Sylius\Component\Registry\ServiceRegistry</parameter>
        <parameter key="sylius.settings.schema_interface">Sylius\Bundle\SettingsBundle\Schema\SchemaInterface</parameter>
        <parameter key="sylius.registry.settings_resolver.class">Sylius\Bundle\SettingsBundle\Resolver\ResolverServiceRegistry</parameter>
        <parameter key="sylius.settings.resolver_interface">Sylius\Bundle\SettingsBundle\Resolver\SettingsResolverInterface</parameter>
        <parameter key="sylius.settings.default_resolver.class">Sylius\Bundle\SettingsBundle\Resolver\DefaultSettingsResolver</parameter>
        <parameter key="sylius.settings.doctrine.parameter_transformer_listener.class">Sylius\Bundle\SettingsBundle\Doctrine\EventListener\ParameterTransformerListener</parameter>
    </parameters>

    <services>
        <service id="sylius.controller.settings" class="%sylius.controller.settings.class%">
            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
        </service>

        <service id="sylius.settings.form_factory" class="%sylius.settings.form_factory.class%">
            <argument type="service" id="sylius.registry.settings_schema" />
            <argument type="service" id="form.factory" />
        </service>

        <service id="sylius.settings.manager" class="%sylius.settings.manager.class%">
            <argument type="service" id="sylius.registry.settings_schema" />
            <argument type="service" id="sylius.registry.settings_resolver" />
            <argument type="service" id="sylius.manager.settings" />
            <argument type="service" id="sylius.factory.settings" />
            <argument type="service" id="event_dispatcher" />
        </service>

        <service id="sylius.registry.settings_schema" class="%sylius.registry.settings_schema.class%" lazy="true">
            <argument>%sylius.settings.schema_interface%</argument>
            <argument>Settings schema</argument>
        </service>

        <service id="sylius.registry.settings_resolver" class="%sylius.registry.settings_resolver.class%" lazy="true">
            <argument type="service">
                <service class="Sylius\Component\Registry\ServiceRegistry">
                    <argument>%sylius.settings.resolver_interface%</argument>
                    <argument>Settings resolver</argument>
                </service>
            </argument>
            <argument type="service" id="sylius.settings.default_resolver"/>
        </service>

        <service id="sylius.settings.default_resolver" class="%sylius.settings.default_resolver.class%">
            <argument type="service" id="sylius.repository.settings" />
        </service>

        <service id="sylius.settings.doctrine.transform_settings_listener" class="%sylius.settings.doctrine.parameter_transformer_listener.class%">
            <argument type="service" id="sylius.registry.settings_schema"/>
            <tag name="doctrine.event_listener" event="onFlush"/>
            <tag name="doctrine.event_listener" event="postFlush"/>
            <tag name="doctrine.event_listener" event="postLoad"/>
        </service>
    </services>

</container>
