# This file is part of the Sylius package.
# (c) Paweł Jędrzejewski

imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: migrations.yml }    
    - { resource: @SyliusCoreBundle/Resources/config/app/main.yml }
    - { resource: override.yml }

framework:
    translator:      { fallback: %sylius.locale% }
    secret:          %sylius.secret%
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: %kernel.debug%
    form:            true
    csrf_protection: true
    validation:      { enable_annotations: true }
    templating:      { engines: ['twig'] }
    default_locale:  "%sylius.locale%"
    trusted_proxies: ~
    session:         ~

twig:
    form:
        resources:
            - SyliusWebBundle:Common:forms.html.twig
            - SyliusResourceBundle::forms.html.twig
            - CmfMediaBundle:Form:fields.html.twig
    debug:            %kernel.debug%
    strict_variables: %kernel.debug%
    paths:
        %kernel.root_dir%/../vendor/payum/payum/src/Payum/Core/Resources/views: PayumCore
        %kernel.root_dir%/../vendor/payum/payum/src/Payum/Stripe/Resources/views: PayumStripe

assetic:
    debug:          %kernel.debug%
    use_controller: false
    bundles:        ['SyliusWebBundle', 'CmfCreateBundle', 'SyliusResourceBundle']
    filters:
        cssrewrite: ~

doctrine:
    dbal:
        driver:   %sylius.database.driver%
        host:     %sylius.database.host%
        port:     %sylius.database.port%
        dbname:   %sylius.database.name%
        user:     %sylius.database.user%
        password: %sylius.database.password%
        charset:  UTF8
    orm:
        auto_generate_proxy_classes: %kernel.debug%
        entity_managers:
            default:
                auto_mapping: true
                mappings:
                    gedmo_loggable:
                        type: annotation
                        prefix: Gedmo\Loggable\Entity
                        dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Loggable/Entity"
                        is_bundle: false
                filters:
                    softdeleteable:
                        class: Gedmo\SoftDeleteable\Filter\SoftDeleteableFilter
                        enabled: true
                dql:
                    string_functions:
                        MATCH: Sylius\Bundle\SearchBundle\Extension\Doctrine\MatchAgainstFunction

doctrine_phpcr:
    session:
        backend: %sylius.phpcr.backend%
        workspace: %sylius.phpcr.workspace%
        username: %sylius.phpcr.user%
        password: %sylius.phpcr.pass%
    odm:
        auto_mapping: true
        auto_generate_proxy_classes: %kernel.debug%

swiftmailer:
    transport: %sylius.mailer.transport%
    host:      %sylius.mailer.host%
    port:      %sylius.mailer.port%
    username:  %sylius.mailer.user%
    password:  %sylius.mailer.password%
    encryption: %sylius.mailer.protocol%
    auth_mode: %sylius.mailer.auth%
    port: %sylius.mailer.port%


#FOS Configuration
#fos_elastica:
#     clients:
#         elasticsearch:
#            servers:
#                - { host: 10.0.0.100, port: 9200, logger: true }
#                - { host: 10.0.0.101, port: 9200, logger: true }
#           #for clustering you need to define the logger because of the https://github.com/FriendsOfSymfony/FOSElasticaBundle/issues/543
#
#     indexes:
#         sylius:
#             client: elasticsearch
#             finder: ~
#             settings:
#                 analysis:
#                     filters:
#                         search_filter: # the small drop down menu on the side of the search field
#                             enabled: true
#                             taxonomy: category # possible values are the high level taxons (category, brand for sylius)
#                         facet_groups: # possible facet groups, you assign them in a finder object
#                             search_set:
#                                 values: [taxons, price, made_of, color]
#                             categories_set:
#                                 values: [price, made_of, color]
#                             all_set:
#                                 values: [taxons, price, made_of]
#                         facets: # possible facets, as long as a model exposes attributes, options or getters with the given name, it will be used as a facet
#                             taxons:
#                                 display_name: 'Basic categories'
#                                 type: terms
#                                 value: ~
#                             price:
#                                 display_name: 'Available prices'
#                                 type: range
#                                 values:
#                                     - { from: 0, to: 2000}
#                                     - { from: 2001, to: 5000}
#                                     - { from: 5001, to: 10000}
#                             made_of:
#                                 display_name: 'Material'
#                                 type: terms
#                                 value: ~
#                             color:
#                                 display_name: 'Available colors'
#                                 type: terms
#                                 value: ~
#             types:
#                 product:
#                     mappings:
#                         name:
#                             type: string
#                             analyzer: my_analyzer
#                         description: ~
#                         slug: ~
#                         color: ~
#                         price:
#                            type: integer
#                         channels:
#                            type: string
#                            index: not_analyzed
#                         taxons:
#                            type: string
#                            index: not_analyzed
#                         size: ~
#                         author: ~
#                         made_of:
#                            type: string
#                            index: not_analyzed
#
#                     persistence:
#                         driver: orm
#                         model: Sylius\Component\Core\Model\Product
#                         model_to_elastica_transformer:
#                            service: sylius.search.transformers.model.product
#                         provider: ~
#                         listener: ~
#                         finder: ~
#
#                 search_log:
#                    mappings:
#                        search_term: ~
#                        ip_address: ~