name: End-to-End (PostgreSQL)

on:
    workflow_dispatch: ~
    workflow_call:
        inputs:
            branch:
                description: "Branch"
                required: false
                type: string
                default: ""
            type:
                description: "Type of the build"
                required: true
                type: string

permissions:
    contents: read

jobs:
    get-matrix:
        runs-on: ubuntu-latest
        name: "Get matrix"
        outputs:
            matrix: ${{ steps.matrix.outputs.prop }}
        steps:
            -   name: "Checkout (With Branch)"
                if: "${{ inputs.branch != '' }}"
                uses: actions/checkout@v4
                with:
                    ref: ${{ inputs.branch }}

            -   name: "Checkout"
                uses: actions/checkout@v4
                if: "${{ inputs.branch == '' }}"

            -   name: "Get matrix"
                id: matrix
                uses: notiz-dev/github-action-json-property@release
                with:
                    path: '.github/workflows/matrix.json'
                    prop_path: '${{ inputs.type }}.e2e-pgsql'

    behat-no-js:
        needs: get-matrix
        runs-on: ubuntu-latest
        name: "Non-JS, PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }}, PostgreSQL ${{ matrix.postgres }}"
        timeout-minutes: 45
        strategy:
            fail-fast: false
            matrix: ${{ fromJson(needs.get-matrix.outputs.matrix) }}

        env:
            APP_ENV: test_cached
            DATABASE_URL: "pgsql://postgres:postgres@127.0.0.1/sylius?charset=utf8&serverVersion=${{ matrix.postgres }}"

        steps:
            -   name: Set variables
                shell: bash
                env:
                    BRANCH: ${{ inputs.branch }}
                run: |
                    if [ "$BRANCH" == "1.12" ]; then
                        echo "USE_LEGACY_POSTGRES_SETUP=yes" >> $GITHUB_ENV
                    else
                        echo "USE_LEGACY_POSTGRES_SETUP=no" >> $GITHUB_ENV
                    fi

            -   name: "Checkout (With Branch)"
                if: "${{ inputs.branch != '' }}"
                uses: actions/checkout@v4
                with:
                    ref: ${{ inputs.branch }}

            -   name: "Checkout"
                if: "${{ inputs.branch == '' }}"
                uses: actions/checkout@v4

            -   name: Prepare manifest.json files
                run: |
                    mkdir -p public/build/admin
                    mkdir -p public/build/shop
                    mkdir -p public/build/app/admin
                    mkdir -p public/build/app/shop
                    echo "{}" > public/build/admin/manifest.json
                    echo "{}" > public/build/shop/manifest.json
                    echo "{}" > public/build/app/admin/manifest.json
                    echo "{}" > public/build/app/shop/manifest.json

            -   name: Build application
                uses: SyliusLabs/BuildTestAppAction@v2.2
                with:
                    build_type: "sylius"
                    cache_key: "${{ github.run_id }}-${{ runner.os }}-${{ hashFiles('composer.json') }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-"
                    cache_restore_key: "${{ github.run_id }}-${{ runner.os }}-${{ hashFiles('composer.json') }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-"
                    e2e: "yes"
                    database: "postgresql"
                    database_version: ${{ matrix.postgres }}
                    legacy_postgresql_setup: ${{ env.USE_LEGACY_POSTGRES_SETUP }}
                    php_version: ${{ matrix.php }}
                    symfony_version: ${{ matrix.symfony }}
                    node_version: "20.x"

            -   name: Run PHPUnit
                run: vendor/bin/phpunit --colors=always

            -   name: Run CLI Behat
                run: vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="@cli&&~@todo" --suite-tags="@cli" || vendor/bin/behat --strict --no-interaction -vvv -f progress --tags="@cli&&~@todo" --suite-tags="@cli" --rerun

            -   name: Run non-UI Behat
                run: vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="~@todo&&~@cli&&~@no-postgres" --suite-tags="@api,@domain" || vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="~@todo&&~@cli&&~@no-postgres" --suite-tags="@api,@domain" --rerun

            -   name: Run non-JS Behat
                run: vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="~@javascript&&~@mink:chromedriver&&~@todo&&~@cli&&~@no-postgres" --suite-tags="@hybrid,@ui" || vendor/bin/behat --strict --no-interaction -vvv -f progress --tags="~@javascript&&~@mink:chromedriver&&~@todo&&~@cli&&~@no-postgres" --suite-tags="@hybrid,@ui" --rerun

            -   name: Upload logs
                uses: actions/upload-artifact@v3
                if: failure()
                with:
                    name: "Logs (non-JS, PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }}, PostgreSQL ${{ matrix.postgres }})"
                    path: |
                        etc/build/
                        var/log
                    if-no-files-found: ignore

    behat-ui-js:
        needs: get-matrix
        runs-on: ubuntu-latest
        name: "JS, PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }}, PostgreSQL ${{ matrix.postgres }}, Twig ${{ matrix.twig }}, API Platform ${{ matrix.api-platform }}"
        timeout-minutes: 45
        strategy:
            fail-fast: false
            matrix: ${{ fromJson(needs.get-matrix.outputs.matrix) }}

        env:
            APP_ENV: test_cached
            DATABASE_URL: "pgsql://postgres:postgres@127.0.0.1/sylius?charset=utf8&serverVersion=${{ matrix.postgres }}"
        
        steps:
            -   name: Set variables
                shell: bash
                env:
                    BRANCH: ${{ inputs.branch }}
                run: |
                    if [ "$BRANCH" == "1.12" ]; then
                        echo "USE_LEGACY_POSTGRES_SETUP=yes" >> $GITHUB_ENV
                    else
                        echo "USE_LEGACY_POSTGRES_SETUP=no" >> $GITHUB_ENV
                    fi

            -   name: "Checkout (With Branch)"
                if: "${{ inputs.branch != '' }}"
                uses: actions/checkout@v4
                with:
                    ref: ${{ inputs.branch }}

            -   name: "Checkout"
                if: "${{ inputs.branch == '' }}"
                uses: actions/checkout@v4

            -   name: Get Composer cache directory
                id: composer-cache
                run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

            -   name: "Restore dependencies"
                uses: actions/cache@v3
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: "${{ github.run_id }}-${{ runner.os }}-${{ hashFiles('composer.json') }}-symfony-${{ matrix.symfony }}-api-platform-${{ matrix.api-platform }}"
                    restore-keys: "${{ github.run_id }}-${{ runner.os }}-${{ hashFiles('composer.json') }}-symfony-${{ matrix.symfony }}-api-platform-${{ matrix.api-platform }}"

            -   name: Restrict Twig
                if: matrix.twig == '^2.12'
                run: composer require --no-update --no-scripts --no-interaction "twig/twig:${{ matrix.twig }}"

            -   name: Build application
                uses: SyliusLabs/BuildTestAppAction@v2.2.1
                with:
                    build_type: "sylius"
                    cache_key:  "${{ github.run_id }}-${{ runner.os }}-${{ hashFiles('composer.json') }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-"
                    cache_restore_key: "${{ github.run_id }}-${{ runner.os }}-${{ hashFiles('composer.json') }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-"
                    e2e: "yes"
                    database: "postgresql"
                    database_version: ${{ matrix.postgres }}
                    legacy_postgresql_setup: ${{ env.USE_LEGACY_POSTGRES_SETUP }}
                    php_version: ${{ matrix.php }}
                    symfony_version: ${{ matrix.symfony }}
                    node_version: "20.x"

            -   name: Install Behat driver
                run: vendor/bin/bdi detect drivers

            -   name: Run Behat (Chromedriver)
                run: vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="@mink:chromedriver&&~@todo&&~@cli" --suite-tags="@ui" || vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="@mink:chromedriver&&~@todo&&~@cli" --suite-tags="@ui" --rerun

            -   name: Run Behat (Panther)
                run: vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="@javascript&&~@todo&&~@cli" --suite-tags="@ui" || vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="@javascript&&~@todo&&~@cli" --suite-tags="@ui" --rerun

            -   name: Upload logs
                uses: actions/upload-artifact@v3
                if: failure()
                with:
                    name: "Logs (JS, PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }}, ApiPlatform ${{ matrix.api-platform }}, Twig ${{ matrix.twig }}, MySQL ${{ matrix.postgres }})"
                    path: |
                        etc/build/
                        var/log
                    if-no-files-found: ignore
