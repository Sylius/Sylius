name: Application

on:
    push:
        tags:
            - v1.*
        branches-ignore:
            - 'dependabot/**'
        paths-ignore:
            - "adr/**"
            - "docs/**"
            - "*.md"
    pull_request:
        paths-ignore:
            - "adr/**"
            - "docs/**"
            - "*.md"
    schedule:
        -
            cron: "0 1 * * 6" # Run at 1am every Saturday
    workflow_dispatch: ~

jobs:
    test-application-without-frontend-mysql:
        runs-on: ubuntu-latest

        name: "Test non-JS application (PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }}, MySQL ${{ matrix.mysql }}, Twig ${{ matrix.twig }}, DBAL ${{ matrix.dbal }}.x)"

        timeout-minutes: 25

        strategy:
            fail-fast: false
            matrix:
                php: ["8.1"]
                symfony: ["^6.0"]
                mysql: ["5.7"]
                twig: ["3.x"]
                dbal: ["3"]

        env:
            APP_ENV: test_cached
            DATABASE_URL: "mysql://root:root@127.0.0.1/sylius?charset=utf8mb4&serverVersion=${{ matrix.mysql }}"

        steps:
            -
                uses: actions/checkout@v2

            -
                name: Shutdown default MySQL
                run: sudo service mysql stop

            -
                name: Setup MySQL
                uses: mirromutth/mysql-action@v1.1
                with:
                    mysql version: "${{ matrix.mysql }}"
                    mysql root password: "root"

            -
                name: Setup PHP
                uses: shivammathur/setup-php@v2
                with:
                    php-version: "${{ matrix.php }}"
                    ini-values: date.timezone=Europe/Warsaw, opcache.enable=1, opcache.enable_cli=0, opcache.memory_consumption=512, opcache.max_accelerated_files=65407, opcache.interned_strings_buffer=8, opcache.validate_timestamps=0, opcache.save_comments=1, opcache.fast_shutdown=0
                    extensions: intl, gd, opcache, mysql, pdo_mysql
                    tools: symfony
                    coverage: none

            -   name: Install Symfony CLI
                run: |
                    curl -sS https://get.symfony.com/cli/installer | bash
                    mv /home/runner/.symfony5/bin/symfony /usr/local/bin/symfony

            -
                name: Restrict Symfony version
                if: matrix.symfony != ''
                run: |
                    composer global config --no-plugins allow-plugins.symfony/flex true
                    composer global require --no-progress --no-scripts --no-plugins "symfony/flex:1.18.5"
                    composer config extra.symfony.require "${{ matrix.symfony }}"

            -
                name: Restrict doctrine/dbal version
                if: matrix.dbal == '2'
                run: |
                    composer require "doctrine/dbal:^2.0" --no-update --no-scripts --no-interaction

            -
                name: Get Composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -
                name: Cache Composer
                uses: actions/cache@v2
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-composer-${{ hashFiles('**/composer.json') }}
                    restore-keys: |
                        ${{ runner.os }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-composer-

            -
                name: Restrict Twig version
                if: matrix.twig != ''
                run: |
                    composer require "twig/twig:${{ matrix.twig }}" --no-update --no-scripts --no-interaction

            -
                name: Install PHP dependencies
                run: composer update --no-interaction --no-scripts

            -
                name: Dump the environment
                run: |
                    echo "DATABASE_URL=$DATABASE_URL" >> .env.$APP_ENV
                    composer dump-env $APP_ENV

            -
                name: Warmup cache
                run: bin/console cache:warmup

            -
                name: Make filesystem readonly
                run: chmod -R 555 app bin config docs features src templates tests translations vendor

            -
                name: Prepare application database
                run: |
                    APP_DEBUG=1 bin/console doctrine:database:create -vvv
                    bin/console doctrine:migrations:migrate -n -vvv

            -
                name: Test provided migrations
                run: |
                    bin/console doctrine:migrations:migrate first --no-interaction
                    bin/console doctrine:migrations:migrate latest --no-interaction

            -
                name: Validate Database Schema
                run: bin/console doctrine:schema:validate -vvv

            -
                name: Run non-JS Behat
                run: |
                    vendor/bin/behat features/account/ --tags="~@javascript && ~@todo" --colors --strict --no-interaction -vvv -f progress || vendor/bin/behat features/account/ --tags="~@javascript && ~@todo" --colors --strict --no-interaction -vvv -f progress --rerun

            -
                name: Upload Behat logs
                uses: actions/upload-artifact@v2
                if: failure()
                with:
                    name: "Behat logs (non-JS, PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }})"
                    path: etc/build/
                    if-no-files-found: ignore
